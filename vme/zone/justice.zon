/*
filename    justice
password 	
changedby   
EmailAdd    
request     compile
version     1.00
END HEADER*/

#include <macros.h>

/* 
   Justice works like this:

   A zone where law and order is enforced needs the following:

      The reward_board has DIL xxx on it.
      The captain has DIL yyy on him.
      Guard / law enforcers have DIL xxx on them
      Is there any DIL needed for e.g. a bar tender  wanting to report a crime?

   Each time a crime is committed the following happens:

   The criminal gets the CHAR_OUTLAW flag set.
   The criminal gets the following extras added:
      - $ ?
      - $ ?
   The reward_board gets the following extras added:
      - $ ?
   Any witnesses get the following extras added:
      - $ ? 

   Details on the extras above:

   reward_board@zone extras:
      Names {"$suspect_160","$crime_Moe_7_janitor_8_5_1","$SUSPECT"}
      "
      Moe has been accused in the murder of janitor. This crime was witnessed by: Mr Catherfield.
      This crime was also confirmed by Fizban.
      "

      There are three names in each entry. The important one is the second name, It isi:
      $crime_<name of criminal>_<pid of criminal>_<name of victim>_<crime_type>_<expiration ticks>_<reported>
      The descr for each crime is what is displayed on the reward_board under "Suspects" heading.

   Witnesses extras:
      Names {"$witness","$witness_161_8_5_1"i, "$witness_7"}
      "
      Larry committed a crime.
      "

      The important name is the second name: $witness_<crime_number>_<crime_type>_<pid>_<ticks until witness extra expires>
      The descr filed for witness is not used at the moment.

   Criminal extras:
      Names {"$reward","$reward_250000_1050_1"}
      "
      A reward of 250000 gold has been offered for the head of Tank
      "

      The second name is the important one: $reward_<gold reward>_<xp reward>_<reward increment>
      the descr of a reward is displayed on the Reward Board under Wanted Dead

*/

%zone justice 

title "The justice zone"
lifespan 20
reset RESET_NOT

%dil


// Used for ?
//
//
dilbegin crime_stopper();
var
   c_info : stringlist;
   suspects : extraptr;
   time_left : integer;
code
{
   :start:
   heartbeat := WAIT_SEC * 5 * 60;
   wait(SFB_TICK, TRUE);

   suspects := self.extra;

   while (suspects)
   {
      if ("$SUSPECT" in suspects.names)
      {
         c_info := split(suspects.names.[1],"_");
         time_left := atoi(c_info.[5]);
         time_left := time_left - 1;
         if (time_left <= 0)
            subextra(self.extra, suspects.names.[0]);
         else
            suspects.names.[1] := c_info.[0]+"_"+c_info.[1]+"_"+c_info.[2]+"_"+c_info.[3]+"_"+c_info.[4]+"_"+itoa(time_left)+"_"+c_info.[6];
      }
      suspects := suspects.next;
   }
   goto start;
}
dilend



dilbegin set_reward_char(criminal : unitptr, incr : integer);
var
   gold : integer;
   xp : integer;
   r_data : stringlist;
   k : string;
   ex_string : stringlist;
   tmp : integer;

code
{
   gold := 0;
   xp := 0;

   unset(criminal.charflags, CHAR_PROTECTED);
   set(criminal.charflags, CHAR_OUTLAW);

   if ("$reward" in criminal.extra)
   {
      r_data := split(criminal.extra.["$reward"].names.[1],"_");
      tmp := atoi(r_data.[3]) +1;
      k := r_data.[0]+"_"+r_data.[1]+"_"+r_data.[2]+"_"+itoa(tmp);
      criminal.extra.["$reward"].names.[1] := k;
      return;
   }

   gold := criminal.level * criminal.level * 100;

   xp :=  criminal.level * 20 + 50;

   if (criminal.type == UNIT_ST_PC)
   {
      criminal.crimes := criminal.crimes + incr;
      // xp = MIN(lose_exp(ch) / 2, xp);
   }

   addstring(ex_string,"$reward" );
   addstring(ex_string, "$reward_"+itoa(gold)+"_"+itoa(xp)+"_"+itoa(1));
   addextra(criminal.extra, ex_string, "A reward of "+itoa(gold)+" gold has been offered for the head of "+criminal.name);  

   return;    
} 
dilend



dilbegin crime_counter(criminal : unitptr, incr : integer, first_accuse : integer);
external
   set_reward_char@justice(criminal : unitptr, incr : integer);

code
{
   
   if ((criminal.crimes + incr) / 8 > criminal.crimes / 8)
   {
      if (not(isset(criminal.charflags, CHAR_OUTLAW)))
         unset(criminal.charflags, CHAR_PROTECTED);
   }

   if ((criminal.crimes + incr) / 31 > criminal.crimes / 32)
      set(criminal.charflags, CHAR_OUTLAW | CHAR_PROTECTED);

   if (((criminal.crimes + incr) / 64 > criminal.crimes / 64))
   {
      set_reward_char@justice(criminal, incr);
   }
   else
   {
      criminal.crimes := criminal.crimes + incr;
   }
   return;
}

dilend



dilbegin update_criminal(deputy : unitptr, cr_name : string, crime_type : integer,pidx : integer,  first_accuse : integer);
external
   crime_counter@justice(criminal : unitptr, incr : integer, first_accuse : integer);
var
   criminal : unitptr;
   incr : integer;

code
{
   criminal := findunit(deputy, cr_name, FIND_UNIT_GLOBAL, null);

   if (criminal.idx == pidx)
   {
      act("$1n tells you, 'You are in trouble, you good-for-nothing ...'", A_SOMEONE, deputy,null, criminal, TO_VICT);
      if (first_accuse)
         incr := crime_type;
      else
         incr := CRIME_EXTRA;
      crime_counter@justice(criminal, incr, first_accuse);
   }
   return;
}
dilend



// Called from ?
// Call this function to add a $crime to a reward board. The reward_board in zone xxx
// will be chosen based on what zone 'self' is in when the crime is committed. (??)
//
// self       : The char that is committing the crime.
// vict       : The char that a crime was committed against.
// crime_type : either CRIME_MURDER or CRIME_STEALING
// crime_no   : Do we really need that? Why?
// crime_clear: ? 
//
dilbegin add_crime(vict : unitptr, crime_type: integer, crime_no : integer, crime_clear : integer);
var
   pre : stringlist;
   i : integer;
   wp : unitptr;
   desc : string;
   cr_string :string;
   cr_string_2 : string;

code
{
   cr_string := "$suspect_"+itoa(crime_no);

   if (crime_type == CRIME_MURDER)
   {
      cr_string_2 := "$crime_"+self.name+"_"+itoa(self.idx)+"_"+vict.name+"_"+itoa(CRIME_MURDER)+"_"+itoa(crime_clear)+"_"+itoa(0);
      desc := self.name+" is suspected of the murder of "+vict.name+". Anyone with information should report it to the Guard's Office.";
   }
   else if (crime_type == CRIME_STEALING)
   {
      cr_string_2 := "$crime_"+itoa(self.idx)+"_"+vict.name+"_"+itoa(CRIME_STEALING)+"_"+itoa(crime_clear)+"_"+itoa(0);
      desc := self.name+" is suspected of stealing from "+vict.name+". Anyone with information should report it to the Guard's Office.";
   }
   else
   {
      log("Unknown crime type in add_crime()");
   }

   // xxx - something needs to be done so it's the udgaard or midgaard or other board

   wp := findsymbolic("reward_board@udgaard");  //+self.outside.zoneidx); 
   addstring(pre, cr_string);
   addstring(pre, cr_string_2); 
   addstring(pre, "$SUSPECT"); 
   addextra(wp.extra, pre, desc  ); 


   // xxx - Isn't quit; better?
   i := dildestroy("add_crime@justice", self);
}
dilend




dilbegin witness_timer();
var
   tm : integer;
   d : integer;
   witness : extraptr;
   w_info : stringlist;

code
{
   heartbeat := WAIT_SEC * 5 * 60;

   :start:
   wait(SFB_TICK, TRUE);

   witness :=self.extra;
   while(witness)
   {
      if ("$witness" in witness.names)
      {
         w_info := split(witness.names.[1], "_");
         tm := atoi(w_info.[4]);
         tm := tm - 1;
         if (tm <= 0)
            subextra(self.extra, witness.names.[0]);
         else
            witness.names.[1] := w_info.[0]+"_"+w_info.[1]+"_"+w_info.[2]+"_"+w_info.[3]+"_"+itoa(tm);
      }
      witness := witness.next;
   }
   if (not("$witness" in self.extra))
      quit;
   else
      goto start; 
}
dilend



dilbegin fnpri(FN_PRI_MISSION+1) activate_accuse(crime_type : integer, criminal_name : string);
external
   integer walk_room@function (s:string,i:integer);

var
   i : integer;
   startroom : string;
   accuse_room  : string;
   wr      : integer;
   crime_name : string;
   acc_cmd : string;

code
{
   if (not(self.type == UNIT_ST_NPC))
      goto cleanup;

   if (dilfind ("accuse@justice",self))
      goto cleanup;

   if (crime_type == CRIME_MURDER)
      crime_name := "murder";
   else if (crime_type == CRIME_STEALING)
      crime_name := "stealing";
   else
      log("activate_accuse() illegal crime_type");

   startroom := self.outside.nameidx + "@" + self.outside.zoneidx;
   accuse_room  := "accuse_room@"+self.outside.zoneidx;

   wr:=walk_room@function (accuse_room,5);

   heartbeat := PULSE_SEC*4;
   pause;
   pause;
   act("$1n says, I would like to report a crime!",
               A_HIDEINV, self, null, null, TO_ROOM);
   acc_cmd := "accuse "+criminal_name+" "+crime_name;

   exec(acc_cmd, self);

   pause;
   pause;
   wr := walk_room@function(startroom, 5);

   :cleanup:
   // quit?
   i := dildestroy("activate_accuse@justice", self);
   return;
}
dilend

dilbegin set_witness(criminal : unitptr, crime_no : integer, crime_type : integer, show : integer);
external
   activate_accuse(witness : unitptr, crime_type : integer, criminal_name : string);
var
   i : integer;
   pid: integer;
   acc_cmd : string;
   ex_string : stringlist;

code
{ 
   if (criminal == self)
      goto cleanup;

   if ((self.type == UNIT_ST_NPC) and (not(isset(self.charflags , CHAR_PROTECTED))))
      goto cleanup;

   if (show)
   {
      act("You just witnessed a crime committed by $1n.", A_ALWAYS, criminal, null, self, TO_VICT);
   }

   pid := criminal.idx;
   addstring(ex_string,"$witness" );
   addstring(ex_string, "$witness_"+itoa(crime_no)+"_"+itoa(crime_type)+"_"+itoa(pid)+"_"+itoa(12));
   addstring(ex_string, "$witness_"+itoa(pid));

   addextra(self.extra,ex_string ,criminal.name+" committed a crime.");
   if (not(dilfind("witness_timer@justice", self)))
      dilcopy("witness_timer@justice()",self);
   if ((self.type == UNIT_ST_NPC) and (show))
      dilcopy("activate_accuse@justice("+itoa(crime_type)+","+criminal.name+")",self); 

   :cleanup:
   i := dildestroy("set_witness@justice", self);
   quit;
}
dilend


dilbegin wanted_poster();
var
   found : integer;
   msg : string;
   wp : unitptr;
   suspects : extraptr;
   u : unitptr;
   wanted_dead : string;
   wanted_alive : string;
   wanted_either : string;
   local_suspects : string;

code
{
   :start:

   wanted_dead := "";
   wanted_alive := "";
   wanted_either := "";
   local_suspects :="";

   heartbeat := PULSE_SEC * 1;
   wait (SFB_CMD, ((command ("look"))) and (argument=="board"));
   act("$1n looks at the wanted posters.", A_ALWAYS, activator, null, null, TO_ROOM);
   //sendtext(msg,activator);

   wp := findsymbolic("reward_board@udgaard"); //"+self.outside.zoneidx);
   //xxx is wp not == self?

   suspects := wp.extra;

   // xxx isn't it better to loop through the extras rather than the player list?
   // also looks like this wont show NPCs? Essentially you just want to show all
   // the $reward extras stored on the board right? 
   //
   u:=ghead();
   while (u.type==UNIT_ST_PC)
   {
      if ("$reward" in u.extra)
      {
         wanted_dead := wanted_dead + u.extra.["$reward"].descr+ "<BR>";
      }
      else if (isset(u.charflags, CHAR_PROTECTED) and (isset(u.charflags, CHAR_OUTLAW)))      
         wanted_alive := wanted_alive +u.name+" is wanted alive for imprisonment<br>";
      else if (isset(u.charflags, CHAR_OUTLAW))
         wanted_either := wanted_either + u.name+" is wanted dead or alive.<br>";

      u:=u.gnext;
   }

   while(suspects)
   {
      if ("$SUSPECT" in suspects.names) 
         local_suspects := local_suspects + suspects.descr+"<BR>";

      suspects := suspects.next;
   }

   sendtext("<font color=red>W A N T E D</font><br><br>", activator);
   sendtext("<b><font color=gold>Wanted Dead - Reward Offered</font></b><br><br>", activator);

   if (length(wanted_dead) > 0)
      sendtext(wanted_dead+"<br>", activator);
   else
      sendtext("None at this time.<br>", activator);

   sendtext("<br><b><font color=gold>Wanted Alive</b></font></b><br><br>",activator);

   if (length(wanted_alive) > 0)
      sendtext(wanted_alive+"<br>", activator);
   else
      sendtext("None at this time.<br>", activator);

   sendtext("<br><b><font color=gold>Wanted Dead or Alive</b></font><br><br>", activator);

   if (length(wanted_either) > 0)
      sendtext(wanted_either+"<br>", activator);
   else
      sendtext("None at this time.<br>", activator);

   sendtext("<br><b><font color=gold>Suspects</b></font><br><br>",activator);

   if (length(local_suspects) > 0)
      sendtext(local_suspects+"<br>", activator);
   else
      sendtext("None at this time.", activator);

   block;
   goto start;
}
dilend


dilbegin  fnpri(FN_PRI_MISSION-1) accuse();
external
update_criminal(deputy : unitptr, cr_name : string, crime_type : integer,pidx : integer,  reported : integer);
var
criminal : string;
crime : string;
crime_type : integer;
pid : integer;
wp : unitptr;
k : string;
wk : string;
w_data :stringlist;
crime_info : stringlist;
i : integer;
found : integer;

code
{
:start:
found := 0;
heartbeat := PULSE_SEC * 1;
wait (SFB_CMD, command ("accuse") );

criminal := getword(argument);
crime := argument;

 if ((activator.type == UNIT_ST_NPC) and  (self.position  == POSITION_SLEEPING))
       exec("wake "+ self.name,activator);  /* command_interpreter(sarg->activator, "wake"); */

 if ((self.position <  POSITION_SLEEPING) or
        (self.position  == POSITION_FIGHTING))
    {
        act("$1n seems busy right now.", A_SOMEONE, self,
            activator, null, TO_ROOM);
        block;
        goto start;
    }

 if (criminal == "")
    {
        act("$1n says, 'Yes... who?'", A_SOMEONE, self, null,
            null, TO_ROOM);
        block;
        goto start;
    }
    else
    {
        if (crime == "")
        {
            act("$1n says, 'What do you wish to accuse $3t of?'",
                A_SOMEONE, self, activator, criminal, TO_ROOM);
            block;
           goto start;
        }
    }

  if (not(strcmp(crime, "murder")))
    {
        crime_type := CRIME_MURDER;
        act("$1n says, 'Murder... lets see', and looks through his files.",
            A_SOMEONE, self, activator, null, TO_ROOM);
    
    }
    else if (not(strcmp(crime, "stealing")))
    {
        crime_type := CRIME_STEALING;
        act("$1n says, 'Stealing... lets see', and looks through his files.",
            A_SOMEONE, self, activator, null, TO_ROOM);
    }
    else
    {
        act("$1n says, 'Are you accusing of murder or stealing?'",
            A_SOMEONE, self, activator, null, TO_ROOM);
        block;
        goto start;
    }


 pid := playerid(criminal);
wk := "$witness_"+itoa(pid);

if (not(wk in activator.extra))
    goto end;
 w_data := split(activator.extra.[wk].names.[1],"_");
 k := "$suspect_"+w_data.[1]; 
if (not(pid ==  atoi(w_data.[3])))

    {
        act("$1n says, 'I have never heard of this so called $2t.'",
            A_SOMEONE,self , criminal, activator, TO_ROOM);
        block;
        goto start;
    }
wp := findsymbolic("reward_board@udgaard"); //+self.outside.zoneidx);
if ( k in wp.extra)
   {
    
    crime_info := split(wp.extra.[k].names.[1],"_");
   /*crime_info:  self.name self.idx vict.name CRIME_TYPE crime_clear reported; */
   /* w_data: crime_no crime_type pid expire_ticks */ 

 if ((crime_type == CRIME_MURDER) and 
                (atoi(crime_info.[4]) != CRIME_MURDER) and 
                (atoi(crime_info.[4]) != CRIME_PK))
                goto end;

            if ((crime_type == CRIME_STEALING) and
                (atoi(crime_info.[4]) != CRIME_STEALING))
                goto end;


   if (atoi(crime_info.[4]) == atoi(w_data.[2]))
      {
       found := 1;
        act("$1n accuses $3t of $2t.", A_SOMEONE, activator, crime, criminal,
        TO_ROOM);
        act("$1n says, 'Ah yes... $2t'", A_SOMEONE, self, crime,
        null, TO_ROOM);
        act("$1n says, 'Thank you very much $3N, I will stop $2t.'",
                        A_SOMEONE, self, criminal, activator, TO_ROOM);
       if (activator.alignment > -1000)
           activator.alignment := activator.alignment +100;
      subextra(activator.extra,wk);
        if (not("$witness" in activator.extra))
            i := dildestroy("witness_timer@justice", activator); 
        if (atoi(crime_info.[6]) == 0)
            {
            update_criminal@justice(self, crime_info.[1], crime_type,pid, TRUE);
            wp.extra.[k].names.[1] := "$crime_"+crime_info.[1]+"_"+crime_info.[2]+"_"+crime_info.[3]+"_"+crime_info.[4]+"_"+crime_info.[5]+"_"+itoa(1);
            if (atoi(crime_info.[4]) == CRIME_MURDER)
              wp.extra.[k].descr := crime_info.[1]+" has been accused in the "+crime+" of "+crime_info.[3]+". This crime was witnessed  by: "+activator.name+"."; 
             else
               wp.extra.[k].descr := crime_info.[1]+" has been accused of steeling from  "+crime_info.[3]+". This crime was witnessed  by: "+activator.name+".";
             } 
             else 
              {
               update_criminal(self, crime_info.[1], crime_type,pid, FALSE);
               wp.extra.[k].descr := wp.extra.[k].descr +"<br>This crime was also confirmed by "+activator.name+".";
              }  
         }
       }
 :end: 
 if (found == 0)
   act("$1n says, 'Sorry $3n, but I don't find your evidence convincing.'",
        A_SOMEONE, self, null, activator, TO_ROOM);
crime_info := null;
w_data := null;  
k := null;
block;
goto start;

}
dilend
dilbegin integer crime_check(att:unitptr, def:unitptr);

code
{
  if (att == null) return(FALSE);
  if (def == null) return(FALSE);
  if ((att.type!=UNIT_ST_PC) and (att.type!=UNIT_ST_NPC)) return(FALSE);
  if ((def.type!=UNIT_ST_PC) and (def.type!=UNIT_ST_NPC)) return(FALSE);
        /* If the attacker is attacking someone protected, or if the
           attacker is protected and is attacking someone non-protected
           then go in action */
if ((not isset(att.charflags,CHAR_SELF_DEFENCE)) and (isset(def.charflags, CHAR_PROTECTED)) and (not isset(def.charflags,CHAR_LEGAL_TARGET))
 or (not isset(att.charflags,CHAR_PROTECTED)) and (isset(def.charflags,CHAR_PROTECTED))) return(TRUE);


    return(FALSE);
}
dilend
dilbegin  fnpri(FN_PRI_RESCUE-1) protect_lawful();
external
    integer crime_check@justice(att:unitptr, def:unitptr);

var
u : unitptr;
bad : unitptr;
vict : unitptr;
i    : integer;
code
{
:start:
heartbeat:=PULSE_SEC*rnd(40,60); 
wait(SFB_TICK|SFB_COM|SFB_DEAD,TRUE);

if (command(CMD_AUTO_TICK))
{
foreach (UNIT_ST_NPC,u)
{
 if ((visible(self, u)) and (u.alignment  <= -350))
    {
     set(u.charflags, CHAR_LEGAL_TARGET);
     act("$1n blows in a small whistle!  'UUIIIIIIIHHHHH'",
     A_SOMEONE, self, null, null, TO_ROOM);
     i := getinteger(DIL_GINT_CALLGUARDS, self, 0);
     set_fighting(self, u);
     unset(u.charflags, CHAR_SELF_DEFENCE);
     goto start;
    }

}
}

else
{
if (command(CMD_AUTO_DEATH))
{
bad := activator.fighting;
            
      if (crime_check@justice(bad, activator))
            {
                set_fighting(self, bad);
                unset(bad.charflags, CHAR_SELF_DEFENCE);
                goto start;
            }
}
}
if (command(CMD_AUTO_COMBAT))
{
vict := activator.fighting;
if (self.position == POSITION_SLEEPING) goto start;
 
if (crime_check(activator,vict))
            {
                set_fighting(self, activator);
                unset(activator.charflags, CHAR_SELF_DEFENCE);
                goto start;
            }
}
goto start;
}
dilend

dilbegin  fnpri(FN_PRI_RESCUE) blow_whistle(); 
external
    integer crime_check@justice(att:unitptr, def:unitptr);
var
    vict     : unitptr;
    i        : integer;
    wake     : integer;
code
{
:start:

   wait(SFB_COM, command(CMD_AUTO_COMBAT));
   heartbeat := PULSE_VIOLENCE;
   vict := activator.fighting;
      secure(vict,nope);
        if (vict==null)goto nope; 
        if ((activator.type!=UNIT_ST_PC) and (activator.type!=UNIT_ST_NPC)) goto nope;     
        if (activator.position < POSITION_STUNNED) goto nope;
        if (self.position == POSITION_SLEEPING)
           {
            /* In the event that a guard is sleeping there is a chance that the whistle will wake him up */
            wake := rnd(1,100);
            if (wake >=25)
               {
                 act("$1n wakes with a start and gets to his feet.",A_SOMEONE,self,null,null,TO_ROOM);
                 self.position := POSITION_STANDING;
                 goto nope;
               }
           }
            
        if ((self.position > POSITION_SLEEPING) and (activator.position == POSITION_FIGHTING) and (visible(self,activator)))
           {
 
           if(crime_check@justice(activator, vict))
             {
               act("$1n blows in a small whistle!  'UUIIIIIIIHHHHH'",A_SOMEONE,self,null,null,TO_ROOM);    
               i:= getinteger(DIL_GINT_CALLGUARDS, self, 0); 
               set_fighting(self, activator);
               unset(vict.charflags, CHAR_SELF_DEFENCE);
               unsecure(vict);
               goto start;
 
               } 
           }
:nope:

unsecure(vict);
goto start;

}
dilend /* End blow_whistle */


%rooms

%mobiles

%end
