/*
filename    test
password    screwloose
changedby   Whistler
EmailAdd     HTMLCOMPILED
request     compile
version     1
END HEADER*/

#include <macros.h>


%zone test

   reset RESET_NOT
   weather 1040
   creators {"papi"}

   notes
   "This is a test zone. Can we do DIL 'unit testing' ?"

   help
   "This zone is not intended for players."

// T003 is a good example of a fairly simple stand-alone test.
//      All testing is happening inside of the T003 code.

%dil

#define TEST_MAXIMUM 9  // T009, T008, ...

#define LOGT_ERROR   0
#define LOGT_SUCCESS 1
#define LOGT_INFO    2


dilbegin logtest(no : integer, ltype : integer, msg : string);
var
   sl : stringlist;
   il : intlist global errors@test;
code
{
   sl := {"ERROR", "SUCCESS", "INFO"};
   log("T"+right("00"+itoa(no),3)+"//"+sl.[ltype]+" "+msg);
   if (ltype == LOGT_ERROR)
      insert(il, length(il), no);
   return;
}
dilend


// ==================== T099 =====================

// Tests DIL template. Tempalte running on unit labcontrol@test
//
dilbegin T099(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
var
   u : unitptr;
code
{
   heartbeat := PULSE_SEC * 1;
   wait(SFB_TICK, TRUE);
   logtest(tstno, LOGT_ERROR, "Failing on purpose");
   goto failure;

   logtest(tstno, LOGT_INFO, "All good");
   goto cleanup;

:failure:
   logtest(tstno, LOGT_ERROR, "Test not as expected");

:cleanup:
   // Naught

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend

// ==================== T009 =====================

dilbegin frame3(tstno : integer, u : unitptr);
external
    logtest(no : integer, ltype : integer, msg : string);
code
{
    heartbeat := 1;
    secure(u, success);
    wait(SFB_TICK, TRUE);  // This will trigger the secure test and the frame trickle
    logtest(tstno, LOGT_ERROR, "Frame3");
    return;

:success:
   logtest(tstno, LOGT_INFO, "Frame3 OK");
   return;
}
dilend


dilbegin frame2(tstno : integer, u : unitptr);
external
    logtest(no : integer, ltype : integer, msg : string);
    frame3(tstno : integer, u : unitptr);
code
{
    secure(u, success);
    frame3(tstno, u);
    logtest(tstno, LOGT_ERROR, "Frame2");
    return;

:success:
   logtest(tstno, LOGT_INFO, "Frame2 OK");
   return;
}
dilend

// Tests DIL secure()
// Test that secure will trickle down through DIL frames
//
dilbegin T009(tstno : integer);
external
    logtest(no : integer, ltype : integer, msg : string);
    frame2(tstno : integer, u : unitptr);

var
   r, u : unitptr;
code
{
    u := load("experiment@test");
    secure(u, cleanup);
    r := findsymbolic("void@basis");
    link(u, r);  // move to a far away location, doesn't trigger secure
    frame2(tstno, u); // Frame3 will pause which will trigger cascade of secure checks as frames pop.
    // If we return and it doesn't trigger the secure, then we have an issue
    goto failure;

:failure:
   logtest(tstno, LOGT_ERROR, "Test not as expected");
   goto cleanup;
   
:cleanup:
   unsecure(u);
   destroy(u);
   // Naught

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend




// ==================== T008 =====================

// Tests DIL secure()
// Test that moving the unit away and then calling a pausing DIL will trigger secure
// This is the functionality I need to restore
//
dilbegin T008(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
   Explainer@quests(pc : unitptr, sl : stringlist);

var
   r, u : unitptr;
code
{
   heartbeat := PULSE_SEC * 1;
   u := load("experiment@test");
   secure(u, cleanup);
   r := findsymbolic("void@basis");
   log("a");
   link(u, r);  // move to a far away location, doesn't trigger secure
   log("b");

   // call a mini DIL that has no dil secure triggers
   // it shouldn't provoke a trigger
   Explainer@quests(u, {"bounce", "jump"}); 
   log("c");

   // If we return and it doesn't trigger the secure, then we have an issue
   goto failure;

:failure:
   logtest(tstno, LOGT_ERROR, "Test not as expected");
   goto cleanup;

:cleanup:
   unsecure(u);
   destroy(u);
   // Naught

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend


// ==================== T007 =====================

// Tests DIL secure()
// Test that moving the unit away and then calling an immediate DIL will not trigger secure
//
dilbegin T007(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
   integer rev_dir@function(i : integer);
var
   r, u : unitptr;
   i : integer;
code
{
   heartbeat := PULSE_SEC * 1;
   u := load("experiment@test");
   secure(u, failure);
   r := findsymbolic("void@basis");
   link(u, r);  // move to a far away location, doesn't trigger secure

   // call a mini DIL that has no dil secure triggers
   // it shouldn't provoke a trigger
   i := rev_dir@function(DIR_NORTH); 
   goto cleanup;

:failure:
   logtest(tstno, LOGT_ERROR, "Test not as expected");
   return;

:cleanup:
   unsecure(u);
   destroy(u);
   // Naught

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend


// ==================== T006 =====================

// Tests DIL secure()
// Test that moving the unit away and then waiting triggers the secure after the wait()
//
dilbegin T006(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
var
   r, u : unitptr;
code
{
   heartbeat := PULSE_SEC * 1;
   u := load("experiment@test");
   secure(u, finished);
   r := findsymbolic("void@basis");
   link(u, r);  // move to a far away location, doesn't trigger secure
   wait(SFB_TICK, TRUE);
   goto failure;

:failure:
   logtest(tstno, LOGT_ERROR, "Test not as expected");
   return;

:cleanup:
   unsecure(u);
   destroy(u);
   // Naught

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend


// ==================== T005 =====================

// Tests DIL secure()
// Test that moving the unit away with no wait() doesn't trigger the secure
//
dilbegin T005(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
var
   r, u : unitptr;
code
{
   heartbeat := PULSE_SEC* 1;
   u := load("experiment@test");
   if (u == null)
   {
      log("Unable to load object");
      goto failure;
   }
   secure(u, failure);
   wait(SFB_TICK, TRUE);
   if (u == null)
   {
      log("u null after wait");
      goto failure;
   }
   r := findsymbolic("void@basis");
   link(u, r);  // move to a far away location, doesn't trigger secure
   // We should get to here without a secure trigger because 
   // there is no "wait"
   logtest(tstno, LOGT_INFO, "All good");
   goto cleanup;

:failure:
   logtest(tstno, LOGT_ERROR, "Test not as expected");
   return;

:cleanup:
   unsecure(u);
   destroy(u);
   // Naught

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend

// ==================== T004 =====================

// Tests DIL secure().
// Test that destroying a unit triggers its secure
//
dilbegin T004(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
var
   r, u : unitptr;
code
{
   heartbeat := PULSE_SEC * 1;
   u := load("experiment@test");
   if (u == null)
      goto failure;
   secure(u, cleanup);
   destroy(u);  // Destroy will trigger a secure test
   goto failure;

:failure:
   logtest(tstno, LOGT_ERROR, "Test not as expected");
   return;

:cleanup:
   // Naught

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend

// ==================== T003 =====================

// Tests DIL store / restore
//
dilbegin T003(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
var
   r, u1, u2 : unitptr;
code
{
   // interrupt(SFB_MSG, argument == "failure", failure);

   r := findroom("testlabc@test");
   if (r.inside != null)
   {
      logtest(tstno, LOGT_ERROR, "Room not empty in beginning");
      goto failure;
   }

   u1 := load("pbox@test");
   link(u1, r);
   u2 := load("pbox@test");
   link(u2, u1);

   store(u1, "shazam.test", TRUE);
   destroy(u1);
   if (r.inside != null)
   {
      logtest(tstno, LOGT_ERROR, "Room not empty after destroy");
      goto failure;
   }

   u1 := restore("shazam.test", r);
   if (u1 == null)
   {
      logtest(tstno, LOGT_ERROR, "Room empty after restore");
      goto failure;
   }

   if (u1.symname != "pbox@test")
   {
      logtest(tstno, LOGT_ERROR, "Room didn't contain Pandora's box");
      goto failure;
   }

   if (u1.inside.symname != "pbox@test")
   {
      logtest(tstno, LOGT_ERROR, "Pandora's box didn't contain Pandora's box");
      goto failure;
   }
   logtest(tstno, LOGT_INFO, "All good");
   goto cleanup;

:failure:
   logtest(tstno, LOGT_ERROR, "Test not as expected");

:cleanup:
   u1 := findsymbolic("pbox@test");
   destroy(u1);
   u1 := findsymbolic("pbox@test");
   destroy(u1);

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend



// ==================== T002 =====================

dilbegin globalvar(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);

var
   u : unitptr;
   sl : stringlist global testsl@test;
   il : intlist global testil@test;
code
{
   if (length(sl) != 3)
      goto failure;

   if (length(il) != 3)
      goto failure;

   if ((sl.[0] != "abc") or (sl.[1] != "def") or (sl.[2] != "ghi"))
      goto failure;

   if ((il.[0] != 42) or (il.[1] != 43) or (il.[2] != 44))
      goto failure;

   insert(sl, 3, "jkl");
   insert(il, 3, 45);
   goto success;

:success:
   logtest(tstno, LOGT_INFO, "sub test OK");
   sendtoalldil("success", "T"+right("00"+itoa(tstno), 3)+"@test");
   quit;

:failure:
   logtest(tstno, LOGT_ERROR, "Test Failed.");
   sendtoalldil("failure", "T"+right("00"+itoa(tstno), 3)+"@test");
   quit;
}
dilend



// Tests global DIL variables
//
dilbegin T002(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
var
   u1 : unitptr;
   sl : stringlist global testsl@test;
   il : intlist global testil@test;
code
{
   interrupt(SFB_MSG, argument == "failure", failure);

   sl := {"abc", "def", "ghi"};
   il := {42, 43, 44};

   if (length(sl) != 3)
      goto failure;

   if (length(il) != 3)
      goto failure;

   if ((sl.[0] != "abc") or (sl.[1] != "def") or (sl.[2] != "ghi"))
      goto failure;

   if ((il.[0] != 42) or (il.[1] != 43) or (il.[2] != 44))
      goto failure;
      
   u1 := load("experiment@test");
   link(u1, findroom("testlabc@test"));
   dilcopy("globalvar@test("+itoa(tstno)+")", u1);

   // Wait for the globalvar to change the variable

   heartbeat :=PULSE_SEC * 3;
   wait(SFB_TICK, TRUE);

   if (length(sl) != 4)
      goto failure;

   if (length(il) != 4)
      goto failure;

   if ((sl.[0] != "abc") or (sl.[1] != "def") or (sl.[2] != "ghi") or (sl.[3] != "jkl"))
      goto failure;

   if ((il.[0] != 42) or (il.[1] != 43) or (il.[2] != 44) or (il.[3] != 45))
      goto failure;

   logtest(tstno, LOGT_INFO, "Data OK");
   goto cleanup;

:failure:
   logtest(tstno, LOGT_ERROR, "Data not as expected");

:cleanup:
   logtest(tstno, LOGT_INFO, "Cleaning up");
   u1 := findsymbolic("experiment@test");
   destroy(u1);
   u1 := findsymbolic("follower@test");
   destroy(u1);

:finished:
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend



// ==================== T001 =====================

dilbegin followdil(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);

var
   u : unitptr;
   i : integer;
code
{
   exec("follow experiment", self);
   exec("stand", self);
   if (self.master == null)
      logtest(tstno, LOGT_ERROR, "Unable to follow");
   else
      logtest(tstno, LOGT_INFO, "Following: " + self.master.name);

   u := self.master;
   secure(u, lostit);
   heartbeat := 1;

   i := 0;
:loop:
   wait(SFB_TICK, TRUE);
   if (u == null)
   {
      logtest(tstno, LOGT_ERROR, "u turned to null.");
      goto terminate;
   }
   if (i % 5 == 0)
      logtest(tstno, LOGT_INFO, "Follower has master secured()");
   i := i + 1;
   goto loop;

:lostit:
   logtest(tstno, LOGT_ERROR, "followdil() secure() trigger follower lost master.");

:terminate:
   sendtoalldil("fail", "T001@test");
   quit;
}
dilend

dilbegin walkeast(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
   integer walk_room@function(place:string, spd:integer);
var
   u : unitptr;
   i : integer;
code
{
   heartbeat := PULSE_SEC;
   pause;
   u := findunit(self, "follower", FIND_UNIT_SURRO, null);
   if (u == null)
   {
      logtest(tstno, LOGT_ERROR, "Unable to find follower");
      goto terminate;
   }
   secure(u, lostpc);

   logtest(tstno, LOGT_INFO, "Test Starting");

   logtest(tstno, LOGT_INFO, "in room: "+self.outside.symname);
   exec("east", self);
   logtest(tstno, LOGT_INFO, "in room: "+self.outside.symname);
   pause;
   if (u == null)
   {
      logtest(tstno, LOGT_ERROR, "secure(u) null after exec() one");
      goto terminate;
   }
   if (u.outside != self.outside)
   {
      logtest(tstno, LOGT_ERROR, "follower not in the same room as master");
      goto terminate;
   }

   exec("east", self);
   logtest(tstno, LOGT_INFO, "in room: "+self.outside.symname);
   pause;
   if (u == null)
   {
      logtest(tstno, LOGT_ERROR, "secure(u) null after exec() two");
      goto terminate;
   }
   if (u.outside != self.outside)
   {
      logtest(tstno, LOGT_ERROR, "follower not in the same room as master");
      goto terminate;
   }

   pause;
   exec("east", self);
   logtest(tstno, LOGT_INFO, "in room: "+self.outside.symname);
   pause;
   if (u == null)
   {
      logtest(tstno, LOGT_ERROR, "secure(u) null after exec() three");
      goto terminate;
   }
   if (u.outside != self.outside)
   {
      logtest(tstno, LOGT_ERROR, "follower not in the same room as master");
      goto terminate;
   }

   pause;
   logtest(tstno, LOGT_INFO, "FIRST WALK_ROOM to labc");
   i := walk_room@function("testlabc@test", PULSE_SEC);
   logtest(tstno, LOGT_INFO, "in room: "+self.outside.symname);
   pause;
   if (u == null)
   {
      logtest(tstno, LOGT_ERROR, "secure(u) null after exec() three");
      goto terminate;
   }
   if (u.outside != self.outside)
   {
      logtest(tstno, LOGT_ERROR, "follower not in the same room as master");
      goto terminate;
   }

   logtest(tstno, LOGT_INFO, "SECOND WALK_ROOM to labe");
   i := walk_room@function("testlabe@test", PULSE_SEC);
   logtest(tstno, LOGT_INFO, "in room: "+self.outside.symname);
   if (u == null)
   {
      logtest(tstno, LOGT_ERROR, "secure(u) null after exec() five");
      goto terminate;
   }
   if (u.outside != self.outside)
   {
      logtest(tstno, LOGT_ERROR, "follower not in the same room as master");
      goto terminate;
   }
   pause;

   logtest(tstno, LOGT_SUCCESS, "Finished");
   goto terminate;

:lostpc:
   logtest(tstno, LOGT_ERROR, "Triggered secure() not supposed to happen");

:terminate:
   sendtoalldil("terminate", "T001@test");
   quit;   
}
dilend

// Setup test 001
// Tests that a follower and master do not lose each other while moving
//
dilbegin T001(tstno : integer);
external
   logtest(no : integer, ltype : integer, msg : string);
var
   u1, u2 : unitptr;
   i : integer;
code
{
   interrupt(SFB_MSG, argument == "terminate", cleanup);

   u1 := load("experiment@test");
   link(u1, findroom("testlabc@test"));

   u2 := load("follower@test");
   link(u2, findroom("testlabc@test"));

   dilcopy("followdil@test("+itoa(tstno)+")", u2);
   dilcopy("walkeast@test("+itoa(tstno)+")", u1);

   // Here we need to wait for it to either finish
   // or a timer will trigger and fail the test.
   heartbeat := PULSE_SEC * 30;
   i := 0;
   while (i < 4)
   {
      wait(SFB_TICK, TRUE);
      pause;
      i := i + 1;
   }
   logtest(tstno, LOGT_ERROR, "Timeout");

:cleanup:
   logtest(tstno, LOGT_INFO, "Cleaning up");
   u1 := findsymbolic("experiment@test");
   destroy(u1);
   u1 := findsymbolic("follower@test");
   destroy(u1);
   logtest(tstno, LOGT_INFO, "Done");
   sendtoalldil("done", "labdirector@test");
   return;
}
dilend


// ==================== T00X =====================


dilbegin integer buglostint(pc : unitptr, ip : integer, s : string);
code
{
   secure(pc, lostpc);

   :loop:
   wait(SFB_CMD, 1==1);
   goto loop;

   :lostpc:
   log("Lost PC in called function integer.");
   return(0);
}
dilend


dilbegin unitptr buglostpc(pc : unitptr);
external
   integer buglostint(pc : unitptr, ip : integer, s : string);


var
  i : integer;
code
{
   secure(pc, lostpc);

   :loop:
   i := buglostint(pc, 42, "42");
   if (pc == null)
      log("PC is null");
   else
      log(pc.name);
   wait(SFB_CMD, 1==1);
   goto loop;

   :lostpc:
   exec("emote loses its grip.", self);
   log("Lost PC in called function.");
   pc := null;
   return(pc);
}
dilend



%rooms

                                   testlabc

title "Test Laboratory Center"
descr
"   You are in the first test laboratory."
flags {UNIT_FL_NO_WEATHER}
light 5
east to testlabe;
end

                                   testlabe

title "Test Laboratory East"
descr
"   You are in the first test laboratory."
flags {UNIT_FL_NO_WEATHER}
light 5
west to testlabc;
east to testlabc;
end


                                   labcontrol

title "Test Laboratory Control"
descr
"   You are in the laboratory control center."
flags {UNIT_FL_NO_WEATHER}
light 5
up to testlabc;
end


%objects

		pbox
names {"pandora's box", "pandoras box","box"}
title "pandora's box"
descr "Someone has carelessly left a Pandora's box here."
extra {}
"Looks like there could be a box in a box"
cost 1 SILVER_PIECE
rent 1 IRON_PIECE
CONTAINER_DEF(100)
manipulate {MANIPULATE_TAKE}
weight 1
end


		deadbug
names {"dead bug","bug"}
title "a dead bug"
descr "A dead bug lies here."
extra {}
"The bug kind of looks like a black lady bug - and it's obviously quite dead. Perhaps someone squashed it. 
You notice the word 'Papi' inscribed with tiny letters on the rim of its shield"
cost 1 SILVER_PIECE
rent 1 IRON_PIECE
type ITEM_OTHER
manipulate {MANIPULATE_TAKE}
weight 0

dilbegin aware unique issue42();
external
   integer skillchecksa@skills(skillidx : integer, abiidx : integer, difficulty : integer);

var
   i : integer;
   ext : extraptr;
code
{
   quit;
   heartbeat := PULSE_SEC;
   :loop:
   wait(SFB_CMD, TRUE);
   ext := self.extra;
   i := skillchecksa@skills(SKI_SEARCH, ABIL_BRA, ext.vals.[1]);
   log(itoa(i));
   goto loop;
}
dilend

/* Program to test if a changed in compiled DIL will reset the recall counter
dilbegin recall unique testbug();
var
   i : integer;
code
{
   quit;
   heartbeat := PULSE_SEC * 4;
   i := rnd(1,10000);

   :loop:
   wait(SFB_TICK, TRUE);
   log("My state is " + itoa(i));
   //log("yay");
   goto loop;

   quit;
}
dilend*/

end


%mobiles


   experiment

names {"experiment"}
title "an experiment"
descr "an experiment is standing here."
weight 1
M_ZOMBIE_SMALL(1,SEX_NEUTRAL)
end

   follower

names {"follower"}
title "a follower"
descr "a follower is standing here."
weight 1
M_ZOMBIE_SMALL(1,SEX_NEUTRAL)
end


   director

names {"lab director"}
title "a lab director"
descr "a lab director is standing here."
weight 1
M_ZOMBIE_SMALL(1,SEX_NEUTRAL)

dilbegin fnpri(FN_PRI_MISSION) failsafe();
external
   logtest(no : integer, ltype : integer, msg : string);
   rebooting@commands(s : string);
code
{
   heartbeat := PULSE_SEC*60*5; // After 5 minutes, abort
   wait(SFB_TICK, TRUE);
   log("Test/T000//ERROR Fail safe triggered");
   rebooting@commands("0");
   quit;
}
dilend

dilbegin labdirector();
external
   logtest(no : integer, ltype : integer, msg : string);
var 
   i : integer;
   tstno : integer;
   il : intlist global errors@test;
   s : string;
code
{
   logtest(0, LOGT_INFO, "Lab director starting.");

   tstno := TEST_MAXIMUM; // If you add a new T003, then set this to 3, and so forth

   heartbeat := PULSE_SEC * 30;
   interrupt(SFB_MSG, argument == "done", nexttest);

:loop:
   logtest(0, LOGT_INFO, "Lab director launching test " + itoa(tstno));
   dilcopy("T"+right("00"+itoa(tstno), 3)+"@test("+itoa(tstno)+")", self.outside);
   i := 0;
   while (i < 4)
   {
      pause;
      i := i + 1;
   } 
   goto timeout;

:nexttest:
   tstno := tstno - 1;
   if (tstno > 0)
      goto loop;

   logtest(0, LOGT_SUCCESS, "Lab director finished running all tests.");
   goto shutdown;

:timeout:
   logtest(0, LOGT_ERROR, "Lab director stuck.");
   goto shutdown;

:shutdown:
   if (length(il) > 0)
   {
      s := "";
      i := length(il)-1;
      while (i >= 0)
      {
         s := s + itoa(il.[i]) + " ";
         i := i - 1;
      }
      log("The following tests failed : " + s);
      log("Exiting with code " + itoa(il.[0]));
      reboot(il.[0]);
   }
   else
      reboot(0);
   quit;
}
dilend
end


   ladybug

names {"lady bug","bug"}
title "a lady bug"
descr "A lady bug is crawling around."
extra {}
"The lady bug kind of looks like a black lady bug. It's alive. And it's crawling around.
You notice the word 'Papi' inscribed with tiny letters on the rim of its shield."
weight 0
M_ZOMBIE_SMALL(1,SEX_NEUTRAL)

dilbegin test001();
var
   u : unitptr;
code
{
   log("test001 begin");
   if (self.outside.symname != "testlabc@test")
   {
      log("test001 fail - wrong start location"); // not in the expected location 
      quit;
   }

   wait(SFB_TICK, TRUE);
   exec("east", self);

   if (self.outside.symname != "testlabe@test")
   {
      log("test001 fail - unable to move east"); // not in the expected location 
      quit;
   }

   wait(SFB_TICK, TRUE);
   exec("west", self);
   if (self.outside.symname != "testlabc@test")
   {
      log("test001 fail - unable to move west"); // not in the expected location 
      quit;
   }

   log("test001 succcess - able to move");
   quit;
}
dilend


/* dilbegin clingontest();
external
   unitptr buglostpc(pc : unitptr);

var
   u : unitptr;
code
{
   :loop:
   wait(SFB_CMD, activator != self);
   u := activator;
   secure(u, lostpc);
   log("Latched onto " + u.name);
   //exec("emote climbs onto " + u.name, self);
   u := buglostpc(u);
   goto loop;

   :lostpc:
   exec("emote lost its host.", self);
   log("Bug lost PC outer loop");
   goto loop;
}
dilend


dilbegin testzonenpcs();
var
   z : zoneptr;
   u : unitptr;
code
{
   z := zhead();

   while (z)
   {
      log(z.name + " " + z.title);

      u := z.npcs;

      if (u)
      {
         log("got an NPC");
         log("Its name is: " + u.symname);
      }

      z := z.next;
   }
   quit;
}
dilend


dilbegin aware unique mytestsymname();
external
   string testsymname();

var
   s1 : string;
   s2 : string;
code
{
   :loop:
   wait(SFB_CMD, activator != self);

   s1 := activator.symname;
   s2 := self.symname;
   exec("say I am "+s2+" and you are "+s1, self);
   exec("say I am "+self.symname+" and you are "+activator.symname, self);
   s1 := "say I am "+self.symname+" and you are "+activator.symname;
   exec(s1, self);
   s1 := "say when calling: act, self, self, act " + activator.symname + testsymname() + self.symname + activator.symname;
   exec(s1, self);
   goto loop;
}
dilend*/
end


/*
dilbegin findsymtest();
var 
   u : unitptr;
   s : string;
   i : integer;
code
{
   heartbeat := PULSE_SEC * 10;
   :loop:
   wait(SFB_CMD, command("burp"));

   log("activator = " + activator.symname + " idx = " + itoa(activator.idx));
   log("self      = " + self.symname + " idx = " + itoa(self.idx));

   if (self.symname == activator.symname)
      log("Symname is identical");

   if (self.idx == activator.idx)
      log("Idx is identical");

   u := findrndunit(self, FIND_UNIT_WORLD, UNIT_ST_NPC);
   s := u.symname;
   i := u.idx;

   log("found " + s + " " + itoa(i));
   pause;

   u := findsymbolic(s, i);
   s := u.symname;
   i := u.idx;

   log("found " + s + " " + itoa(i));
   goto loop;
}
dilend



dilbegin zonetest();
var 
   z : zoneptr;
code
{
   :loop:
   wait(SFB_CMD, command("smile"));
   z := findzone("basis");

   if (z == null)
      log("no such zone");
   else
      log("found zone z = " + z.name);
   goto loop;
}
dilend


dilbegin dispatchtest();
var 
  s : string;
code
{
   :loop:
   wait(SFB_CMD, command("jump"));

   s := "CHANNEL discord @ " + "<discord> @Papi says, 'Hiya'";
   sendtoalldil(s, "channel@function");
   goto loop;
}
dilend

dilbegin shelltest();
var 
  i : integer;
code
{
   :loop:
   wait(SFB_CMD, command("bow"));

   i := shell("test.sh olle golle");
   log("shell = " + itoa(i));
   goto loop;
}
dilend

dilbegin aware comtest();
var
   s : string;
code
{
   heartbeat := PULSE_SEC*4;

   :init:
   wait(SFB_COM, TRUE);

   if (activator.fighting)
      s := activator.fighting.nameidx;
   else
      s := "(null)";

   log("COM message: " + activator.nameidx + " attacking " + s);
   goto init;
   
   quit;
}
dilend

end*/


/* Reset is only performed at boot time */

%reset

load director into labcontrol max 1

%end
