/*
filename    guild_paths
password    mfxmas
changedby   Mesmer
EmailAdd
request     compile
version     22
END HEADER */

#include <macros.h>
%zone guild_paths
reset RESET_NOT

weather 1040

creators {"eirinn"}

notes
"This has most of the dil relating to guild paths. The rest is in the rebirth
zone or in basis. It's July 18th 1998. About time too."

help
"Mayor Quimby says 'Get outta heaaah'.<br/>
created by eirinn
"

%dil


// =================================================================

/* $ path is OBSOLETE. Use functions in guilds.zon to figure out if 
   a player is in a guild for example 
*/

#define GUILD_PATH "$path"

dilbegin guild_guard(the_guild : string, the_dir : string);
external
   integer IsInGuild@guilds(pc : unitptr, sGuild : string);

code
{
:start:
   wait(SFB_CMD, command(the_dir) and (activator.level < 230));

   if (not IsInGuild@guilds(activator, the_guild))
   {
      block;
      act("You are prevented from going any further " + the_dir + " by " +
          "$3n! (Members Only).",
          A_ALWAYS, activator, null, self, TO_CHAR);
   }
   goto start;
}
dilend /* guild_guard */



/* DIL for rogue teacher to prevent training. */
dilbegin rogue_restrict(guilds : stringlist);
external
   integer IsInGuilds@guilds(pc : unitptr, sGuilds : stringlist);
code
{
   :start:
   wait(SFB_CMD,(command("practice") and (activator.type == UNIT_ST_PC)));

   if (not IsInGuilds@guilds(activator, guilds))
   {
      block;
      exec("say You are not in the correct guild to train here.", self);
   }

   goto start;
 }
 dilend



/* THIS FOLLOWING DIL IS A COMMAND */
dilbegin admin_gp(arg : string);
/* This dil takes input made by the admin for setting up a player on a guild path */
code
{
   log("OBSOLETE admin_gp called");
   quit;
}
dilend /* admin_gp */


/* The following is a command */
dilbegin join_dil(arg : string); /* Block the join command */
code
{
   log("OBSOLETE join_dil in guild_paths called");
   quit;
}
dilend /* join_dil */


/* The following is a social command, guess it should be in another zone */
dilbegin insult_dil(arg : string);
var
   pc   : unitptr;

code
{
   if (arg == "")
   {
      act("You insult the world in general! Life's a bitch!",
          A_ALWAYS, self, null, null, TO_CHAR);
      act("$1n insults the world in general! Life's a bitch!",
          A_SOMEONE, self, null, null, TO_REST);
      quit;
   }

   pc := findunit(self, arg, FIND_UNIT_SURRO, null);

   if (pc == null)
   {
      act("Well, you could insult him if he were here, but he isn't.",
          A_ALWAYS, self, null, null, TO_CHAR);
      quit;
   }

   if ((pc.type == UNIT_ST_PC) or (pc.type == UNIT_ST_NPC))
   {
      act("You insult $3n - what a loser!",
          A_ALWAYS, self, null, pc, TO_CHAR);
      act("$1n insults you - you're a loser!",
          A_SOMEONE, self, null, pc, TO_VICT);
      act("$1n insults $3n - $1e thinks $3n's a loser!",
          A_SOMEONE, self, null, pc, TO_NOTVICT);
      quit;
   }

   if (pc.type == UNIT_ST_OBJ)
   {
      act("You insult " + pc.title + " - how dare it exist!",
          A_ALWAYS, self, null, null, TO_CHAR);
      act("$1n insults " + pc.title + " - how dare it exist!",
          A_SOMEONE, self, null, null, TO_REST);
      quit;
   }

   quit;
}
dilend /* insult_dil */


/* The following dil is a command: guilds */
dilbegin guilds_dil(arg : string);
external
   do_guilds@guilds(arg : string);
code
{
   do_guilds@guilds(arg);
   quit;
}
dilend /* guilds_dil */




dilbegin hand_hold(); /* Take people to their guilds and Udgaard */
var
   the_room   : string;
   dest       : string;
   pc         : unitptr;
   dest_list  : stringlist;
   g_list     : stringlist;
   expd       : extraptr;
   i          : integer;
code
{
   heartbeat := PULSE_SEC * 3;

   dest_list := null;
   addstring(dest_list, "fighter"); 	// 0
   addstring(dest_list, "thief"); 		// 1
   addstring(dest_list, "healer"); 		// 2
   addstring(dest_list, "conjurer"); 		// 3
   addstring(dest_list, "ranger"); 		// 4
   addstring(dest_list, "paladin"); 	// 5
   addstring(dest_list, "sorcerer"); 	// 6
   addstring(dest_list, "assassin"); 	// 7
   addstring(dest_list, "necromancer"); // 8
   addstring(dest_list, "druid"); 		// 9
   addstring(dest_list, "knight"); 		// 10
   addstring(dest_list, "barbarian"); 	// 11
   addstring(dest_list, "udgaard"); 	// 12

   g_list := null;
   addstring(g_list, GUILD_UDG_FIGHTER); 	// 0
   addstring(g_list, GUILD_UDG_THIEF); 		// 1
   addstring(g_list, GUILD_UDG_CLERIC); 	// 2
   addstring(g_list, GUILD_UDG_MAGE); 		// 3
   addstring(g_list, GUILD_NYM_RANGER); 	// 4
   addstring(g_list, GUILD_PALADIN); 		// 5
   addstring(g_list, GUILD_SORCERER); 		// 6
   addstring(g_list, GUILD_ASSASSIN); 		// 7 
   addstring(g_list, GUILD_NECROMANCER); 	// 8
   addstring(g_list, GUILD_NYM_DRUID); 		// 9
   addstring(g_list, GUILD_KNIGHT); 		// 10
   addstring(g_list, GUILD_BARBARIAN); 		// 11


:start:
   wait(SFB_CMD, command("return") and (activator == self.outside)
   and (self.equip != 0));
   block;

   pc := self.outside;
   secure(pc, lost_pc);

   if (pc.position == POSITION_FIGHTING)
   {
      act("You can't do that while you're fighting.",
          A_ALWAYS, pc, null, null, TO_CHAR);
      goto start;
   }

   if (argument == "")
       {
       act ("What about you try returning somewhere?",
          A_ALWAYS, pc, null, null, TO_CHAR);
       goto start;
       }

   dest := argument;

   expd := "$path" in pc.quests;
   if (expd == null)
   {
      act("You have no guild path. Please see an administrator.",
          A_ALWAYS, pc, null, null, TO_CHAR);
      goto lost_pc;
   }
	
	i := -1;
	while (i < 13)
	{
		i := i+1;
		if (((dest_list.[i] in dest) and (g_list.[i] in expd.names)) or (dest_list.[12] in dest))
			i := 777;
	}
	if (i != 777)
	{
		:no2:
		act("That guild is not in your guild path. You cannot go there.",
			A_ALWAYS, pc, null, null, TO_CHAR);
		goto lost_pc;
	}
   if (pc.outside.type != UNIT_ST_ROOM)
   {
      act("You must be in the open for the medallion's powers to work. If " +
          "you are at your destination already it will not work either.",
          A_ALWAYS, pc, null, null, TO_CHAR);
      goto lost_pc;
   }

if (pc.level > 15)
	{
	act("This only works for players less than or equal to level 15.",
		A_ALWAYS,pc,null,null,TO_CHAR);
	act ("Your medallion explodes in a flash of light!",
		A_ALWAYS,pc,null,null,TO_CHAR);
	destroy (self);
	}
   if ((pc.outside.zoneidx != "fightersguild") and
       (pc.outside.zoneidx != "thievesguild") and
       (pc.outside.zoneidx != "clericguild") and
       (pc.outside.zoneidx != "mageguild") and
       (pc.outside.zoneidx != "ranger") and
       (pc.outside.zoneidx != "paladin_guild") and
       (pc.outside.zoneidx != "sorcerer") and
       (pc.outside.zoneidx != "assassin") and
       (pc.outside.zoneidx != "necro_guild") and
       (pc.outside.zoneidx != "druid") and
       (pc.outside.zoneidx != "knight") and
       (pc.outside.zoneidx != "barbarian") and
       (pc.outside.zoneidx != "udgaard") and
       (pc.outside.zoneidx != "midgaard"))
   {
:no_no:
      act("You must be in a guild or in Udgaard or Midgaard for the medallion to work.",
          A_ALWAYS, pc, null, null, TO_CHAR);
      goto lost_pc;
   }
/*
   if ((pc.outside.nameidx + pc.outside.zoneidx) == "templeudgaard")
      goto cont;
   if (((pc.outside.type == UNIT_ST_ROOM) and
        (isset(pc.outside.flags, UNIT_FL_NO_TELEPORT))) or
       (isset(pc.flags, UNIT_FL_NO_TELEPORT)))
   {
      act("Powers beyond your control prevent the teleportation.",
          A_ALWAYS, pc, null, null, TO_CHAR);
      goto lost_pc;
   }
*/

:cont:

   if (dest in dest_list.[0])
      the_room := "outlook@fightersguild";
   else if (dest in dest_list.[1])
      the_room := "study@thievesguild";
   else if (dest in dest_list.[2])
      the_room := "sanctuary@clericguild";
   else if (dest in dest_list.[3])
      the_room := "chan_office@mageguild";
   else if (dest in dest_list.[4])
      the_room := "tent_1@ranger";
   else if (dest in dest_list.[5])
      the_room := "meditat@paladin_guild";
   else if (dest in dest_list.[6])
      the_room := "grotto@sorcerer";
   else if (dest in dest_list.[7])
      the_room := "master_room@assassin";
   else if (dest in dest_list.[8])
      the_room := "up_damp_crypt@necro_guild";
   else if (dest in dest_list.[9])
      the_room := "henge@druid";
   else if (dest in dest_list.[10])
      the_room := "room_5@knight";
   else if (dest in dest_list.[11])
      the_room := "hall_01@barbarian";
   else if (dest in dest_list.[12])
      the_room := "temple@udgaard";
   else goto no2;

:trans_me:

   act("The magic starts to build...",
       A_ALWAYS, pc, null, null, TO_CHAR);
   pause;

   act("You feel yourself pulled to another place.",
       A_ALWAYS, pc, null, null, TO_CHAR);
   act("$1n shimmers then vanishes.",
       A_HIDEINV, pc, null, null, TO_REST);
   link(pc, findroom(the_room));
   act("$1n appears in a shimmering haze.",
       A_HIDEINV, pc, null, null, TO_REST);
   exec("look", pc);

:lost_pc:
   unsecure(pc);
   goto start;
}
dilend /* hand_hold */



dilbegin guild_titles( the_guild : string, title_list : stringlist );
external
   SetTitles@guilds(the_guild : string, title_list : stringlist);
code
{
   SetTitles@guilds(the_guild, title_list);
   quit;
}
dilend


/*
Something I added for familiars but can be used in anything wanting to check
a guild level if you already have something sorry but I couldn't find it.
*/
dilbegin integer level_guild_chk(pc: unitptr,s:string);
var
	expd:extraptr;
code
{
   log("level_guild_chk needs to be rewritten and moved to guilds");
if (pc==null)
	return (-2);

expd := "$path" in pc.quests;

   if (expd == null)
	 	return (-2);
if ((expd.names.[1] == null) or (expd.names.[2] == null) or
       (expd.names.[3] == null) or (expd.names.[4] == null) or
       (expd.names.[5] == null) or (expd.names.[6] == null) or
       (expd.names.[7] == null))
	 	return (-2);

if ((expd.names.[1]!=s) and
(expd.names.[2]!=s) and
(expd.names.[3]!=s))
return (-1);

if (expd.names.[1]==s)
	return (atoi(expd.names.[4]));
else if (expd.names.[2]==s)
	return (atoi(expd.names.[5]));
else if (expd.names.[3]==s)
	return (atoi(expd.names.[6]));

return (-2);
}
dilend


%objects

guild_medallion
names {"Odin's Medallion", "guild medallion", "medallion"}
title "Odin's Medallion of Guild Transport"
descr "Someone has carelessly dropped a powerful medallion here."

extra {}
"It is quite large, weighing heavily in the hand, but more from its
power than because of its weight. There is a small copy of the statue
of Odin in the Temple of Udgaard set in its centre.<br/>
To use the medallion, you must be in Udgaard. Once there, simply wear 
the medallion and then 'return &lt;guild&gt;', where &lt;guild&gt; is fighter,
thief, cleric, mage, ranger, paladin, sorcerer, assassin, knight, 
barbarian, or necromancer.<br/>
If you are in your guild and wish to return to Udgaard, 'return Udgaard'
will take you to Udgaard."

dilcopy hand_hold@guild_paths();

weight 1
bright 5

manipulate {MANIPULATE_TAKE, MANIPULATE_WEAR_NECK}

end /* guild_medallion */

%end
