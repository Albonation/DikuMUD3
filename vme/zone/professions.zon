#include <macros.h>


%zone professions

reset RESET_NOT

creators {"Papi"}

notes "The DIL functions needed to manage Guilds."

help 
"This zone contains helper functions for professions.<br/>

Professions are comparable to natural talents. The profession,
not the guild, determine the training cost.<br/>
So for example, a mage profession means you'll have a low cost
training MAG and BRA. A fighter profession means you have a low
cost training STR and CON.<br/>
"


%dil

// string ProfessionName@professions(prof_xxx : integer);
// integer ProfessionIdx@professions(sGuild : string);
// NewPlayerProf@professions(pc : unitptr, prof : integer);
//

// ===============================================================

dilbegin string ProfessionName(prof_xxx : integer);
var
   sl : stringlist;
code
{
   if ((prof_xxx < 0) or (prof_xxx >= PROFESSION_MAX))
      return ("contact admin about profession");
   sl := {PROFESSION_STRINGS};
   return (sl.[prof_xxx]);
}
dilend

// Given guild name, return profession index
//
//
dilbegin integer ProfessionIdx(sGuild : string);
var
   sl : stringlist;
   i : integer;
code
{
   sl := {PROFESSION_STRINGS};
   i := sGuild in sl;
   i := i - 1;

   return (i);
}
dilend


// To be called on a player that does not have a $profession setup.
//    prof (integer) is the profession to set PROFESSION_XXX
//    descr is description of how it was set (new character, conversion, etc).
//
dilbegin SetupProf(pc : unitptr, prof : integer, desc : string);
var
   sl : stringlist;
   i : integer;
   exd : extraptr;

code
{
   exd := PROFESSION_KEY in pc.info;

   // If there is a $professions, then this doesn't apply.
   if (exd != null)
   {
      log("SetInitalProf() called but $profession was already set for player " + pc.name);
      return;
   }

   if ((i < 0) or (i > PROFESSION_MAX))
   {
      log("SetInitalProf() called but prof OOB.");
      return;
   }

   pc.profession := prof;
   addextra(pc.info, {PROFESSION_KEY}, desc+"<br/>");
   exd := PROFESSION_KEY in pc.info;
   insert(exd.vals, 0, -1); // Dummy -1 for everyone (matches $profession index)

   sl := {PROFESSION_STRINGS};
   addstring(exd.names, sl.[prof]);
   insert(exd.vals, 1, prof); 

   return;
}
dilend



// Call to setup a new player. Only 
//
dilbegin NewPlayerProf(pc : unitptr, prof : integer);
external
   SetupProf@professions(pc : unitptr, prof : integer, desc : string);

var
   sl : stringlist;
   i : integer;
   exd : extraptr;

code
{
   if ((prof == PROFESSION_FIGHTER) or
       (prof == PROFESSION_THIEF) or 
       (prof == PROFESSION_PRIEST) or
       (prof == PROFESSION_CONJURER))
   {
      SetupProf@professions(pc, prof, "New player profession set to "+itoa(prof));
   }
   else
   {
      log("NewPlayerProf got illegal profession " + itoa(prof));
   }

   return;
}
dilend




dilbegin string Specialization(pc : unitptr);
external
   integer GetGuildLevel@guilds(pc : unitptr, sGuild : string);
var
   exd : extraptr;
   sl : stringlist;
   i : integer;
   il : intlist;
code
{
   exd := "$professions" in pc.info;

   // If there is a $professions, then this doesn't apply.
   if (exd != null)
      return ("");

   if (pc.profession == PROFESSION_FIGHTER)
      i := 0;
   else if (pc.profession == PROFESSION_THIEF)
      i := 1;
   else if (pc.profession == PROFESSION_PRIEST)
      i := 2;
   else if (pc.profession == PROFESSION_CONJURER)
      i := 3;
   else
      i := -1;

   // Player is in a core profession
   if (i < 0)
   {
      // Old players will be in odd professions and have no $profession extra
      return ("");
   }


   sl := {GUILD_UDG_FIGHTER, GUILD_UDG_THIEF, GUILD_UDG_CLERIC, GUILD_UDG_MAGE};

   i := GetGuildLevel@guilds(pc, sl.[i]);

   if (i == -1)
   {
      log("error");
      return ("");
   }

   if (i < 25)
      return ("");

   // Aha. We have 25 guild levels in a core profession, time to specialize!
   return ("Time to specialize!");
}
dilend



dilbegin login_clean(prof : integer, desc : string);
external
   SetupProf@professions(pc : unitptr, prof : integer, desc : string);
code
{
   if (PROFESSION_KEY in self.info)
      return;

   log("prof login_clean()");

   if (prof < 0)
   {
      log(self.name + " had profession -1. Bizarre. Setting to 0 (fighter).");
      prof := 0;
      if (desc == "")
         desc := "Bizarre -1";
   }

   SetupProf@professions(self, prof, desc+"<br/>");
   return;
}
dilend


%end
