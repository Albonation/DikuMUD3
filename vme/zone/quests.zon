/*
filename    quest
password    
changedby   Papi
EmailAdd     HTMLCOMPILED
request     compile
version     1
END HEADER*/

/*
2021 Helpers for quests

*/

%zone quests

#include <macros.h>

lifespan 60
reset RESET_ANYHOW
creators {"Papi"}

notes
"Helper function for building quests"

%dil

// ============ GENERIC qstItemsWait() Helper function

// For receiving money:
//
// You'll want to pass on i which is the amount of money and
// s which is the money type. These will be compared against
// 'power' (built-in) and argument
//
dilbegin integer moneycheck(u : unitptr, i : integer, s : string);
code
{
   if (power < i)
   {
      // exec("say That's too little.", self);
      return(0);
   }

   if (power > i)
   {
      // exec("say That's too much.", self);
      return(0);
   }

   if (s != argument)
   {
      // exec("say That's not the right kind of money.", self);
      return(0);
   }

   return(1);
}
dilend


// For checking how much fluid is left:
//
// You'll want to pass on i which is the amount of fluid to 
// at least be in the container
//
dilbegin integer fluidcheck(u : unitptr, i : integer, s : string);
code
{
   if (u.objecttype != ITEM_DRINKCON)
   {
      exec("say That's not a drink container.", self);
      return(0);
   }

   if (u.value[0]< i)
   {
      exec("say There's not enough liquid inside.", self);
      return(0);
   }

   return(1);
}
dilend


// ===========================================================


// The default function to check if player accepts quest
//
// Return 1 if quest accepted, 0 if quest rejected
// 

dilbegin integer default_accept(pc : unitptr, ip : integer, s : string);
var
   i : integer;
   t : string;
code
{
   i := 0;
   secure(pc, lostpc);

:loop:
   //log("Waiting for quest accept command.");
   //log(pc.name);
   // Now wait for an acceptance
	wait(SFB_CMD, activator == pc);
   //log("Got a command.");
   //log(pc.name);

   i := i + 1;

	if (command("nod"))
   {
      return (1);
   }
	else if (command("shake"))
   {
		return (0);
   }
   else if (command("say"))
   {
      s := getword(argument);
      if ((left(s,3)=="yes") or (left(s,3)=="yup") or (left(s,3)=="aye") or (left(s,3)=="yez") or ((left(s,3)=="yea")) or (s=="y"))
         return (1);

      if ((left(s,2)=="no") or (s=="n"))
         return (0);
   }

   if ((i == 2) or (i == 5))
   {
      t := sact(s, A_SOMEONE, pc, null, self, TO_CHAR);
      exec(t, self);
   }

   if (i > 7)
   {
      return (0);
   }

   goto loop;

   :lostpc:
   return(0);
}
dilend


// ===========================================================


// Try to see if "pc" is willing to take on this quest
//
// pc : The player that is the target of this quest request
// sl:  List of strings for the NPC to execute to explain the quest.
//       YOu can use $ variables, e.g. $1n. $1 = player, $3 = self. Strings formatted with "TO_CHAR", "SOMEONE"
//       The very last string should be "nod to accept..." as it will be repeated
//   {"say $1n, do you want this quest?", "jump", "hug $1n", "say <a cmd='"'>nod</a> if you wish to accept"}
//  acptfunc: if blank uses default acceptance function, otherwise write your own. Copy default_accept@quests
//            and make your own code. Use the name of your function in acptfunc, e.g. "myfunc@myzone".
//
// Return unitptr to the hero that wants the quest
//
dilbegin unitptr qstWaitHero(qname : string, pc : unitptr, sl : stringlist, acptfunc : string);
external
   integer default_accept@quests(pc : unitptr, ip : integer, s : string);

var
   i : integer;
   ln : integer;
   s : string;


code
{
   on_activation((self.position <= POSITION_SLEEPING) or (self.position == POSITION_FIGHTING), skip);
   on_activation((pc.position <= POSITION_SLEEPING) or (pc.position == POSITION_FIGHTING), skip);

   if (((qname+" Ongoing") in pc.quests) or ((qname+" Complete") in pc.quests))
   {
      pc := null;
      log("qstWaitHero Ret1");
      return(pc);
   }

	heartbeat := PULSE_SEC * 1;

   // Only deal with visible creatures
   if (not visible(self, pc))
   {
      pause;
      exec("peer", self);
      pc := null;
      log("qstWaitHero Ret2");
      return(pc);
   }

   secure(pc, lostpc);

   i := 0;
   ln := length(sl);
	heartbeat := PULSE_SEC * 4;

   priority;
   // Give the explanation
   while (i < ln)
   {
      s := sact(sl.[i], A_SOMEONE, pc, null, self, TO_CHAR);
      pause;
      exec(s, self);
      i := i + 1;
   }

   if (acptfunc == "")
      acptfunc := "default_accept@quests";

   log("qstWaitHero Ret3");
   i := dilcall(acptfunc)(pc, 0, sl.[ln-1]);

   nopriority;

   if (i == 0)
      goto no_quest;

   log("qstWaitHero Ret4");
   return(pc);

:no_quest:
   heartbeat := PULSE_SEC * 1;
   pause;
	exec("sulk", self);
	unsecure(pc);
   pc := null;
   log("qstWaitHero Ret5");
	return(pc);

:lostpc:
   nopriority;
   heartbeat := PULSE_SEC * 1;
   pause;
	exec("sigh", self);
   pc := null;
   log("qstWaitHero Ret6");
	return(pc);
}
dilend



// pc : The player that is the target of this explanation
// expl: list of strings for the NPC to execute to explain the quest.
//       YOu can use $ variables, e.g. $1n. $1 = self, $3 = player. Strings formatted with "TO_CHAR", "SOMEONE"
//       You can use a special code "::string1::string2" to send an act(string1, pc, null, npc, TO_CHAR) and act(string2, pc, null, npc, TO_REST)
//       The very last string should be "nod to accept..." as it will be repeated
//   {"say $1n, do you want this quest?", "jump", "hug $1n", "say <a cmd='"'>nod</a> if you wish to accept"}
//
// Return unitptr to the hero that wants the quest
//
dilbegin extraptr qstAssign(qname : string, pc : unitptr, sl : stringlist, qdescr : string);
var
   i : integer;
   ln : integer;
   s : string;
   exd : extraptr;
   tsl : stringlist;

code
{
   on_activation((self.position <= POSITION_SLEEPING) or (self.position == POSITION_FIGHTING), skip);

   heartbeat := PULSE_SEC * 3;
   exd := null;

	secure(pc, lostpc);

   // Only deal with visible creatures
   if (not visible(self, pc))
   {
      exec("peer", self);
      return(exd);
   }

   i := 0;
   ln := length(sl);
	pause;
	heartbeat := PULSE_SEC * 4;

   priority;

   // Give the explanation
   while (i < ln)
   {
      if ((sl.[i].[0] == ":") and (sl.[i].[1] == ":"))
      {
         tsl := split(sl.[i], "::");
         if (length(tsl) == 3)
         {
            act(tsl.[1], A_SOMEONE, pc, null, self, TO_CHAR);
            act(tsl.[2], A_SOMEONE, pc, null, self, TO_REST);
            pause;
         }
         else
            log("Found act code :: in qstAssign but not the two expected strings = " + sl.[i]);
      }
      else
      {
         s := sact(sl.[i], A_SOMEONE, pc, null, self, TO_CHAR);
         exec(s, self);
         pause;
      }
      i := i + 1;
   }

   s := qname + " Ongoing";
   sl := null;
   addstring(sl, s);
   addextra(pc.quests, sl, qdescr);
   exd := s in pc.quests;
   sendtext("<div class='cpy'>New Quest: " + qname +"</div><br/>", pc);

:lostpc:
   nopriority;
   return(exd);
}
dilend


dilbegin extraptr qstSetDone(qname : string, pc : unitptr);
var
   exdp : extraptr;
code
{
   exdp := (qname + " Ongoing") in pc.quests;

   if (not ("$done" in exdp.names))
      addstring(exdp.names, "$done");

   return(exdp);
}
dilend



// Add this to a quest NPC that's waiting to "get items" from a player.
// The items received will be destroyed, and incorrect items given back.
//
// Parameters:
//   qname: The 'core' name of the quest. E.g. "Stew Quest".
//          Program will react to any PC which has a "Stew Quest Ongoing".
//
//   itemsl: String list of items to accept. Either the symname or a substring. 
//           E.g. {"mushroom", "black_berries@haon_dor", "garlic", "corpse of rabbit"};
//           For non-symnames if any name in the given item matches the substrings in 
//           the list then it's a match.  
//   itemfunc:  String list of DIL functions that can validate something special. 
//              Must match the itemsl. Not needed for normal items. Needed e.g. for 
//              money or to check if e.g. a barrel is full of water.
//              Format is: <function> <int> <string> like this:
//              {"", "", "", "corpsecheck@quests 0 a string"}
//
// thanksl : String list of thank you statements / actions, one matching each item above. 
//             {"say Thank you $3n, these are really nice mushrooms.",
//             "say Thank you $3n these are really nice berries.",
//             "say Thank you $3n this is really some nice garlic.",
//             "say Look at all the blood, $3n! Well I thank you anyway."};
//             
// thanksl : $1 = pc, $2 = item, $3 = self
//
dilbegin fnpri(FN_PRI_MISSION+5) integer qstItemsWanted(qname : string, 
                                                     itemsl : stringlist,
                                                     itemfunc : stringlist,
                                                     thanksl : stringlist, nothanks : string);
var
  pc     : unitptr;
  item   : unitptr;
  exdp   : extraptr;
  u      : unitptr;
  i      : integer;
  ln     : integer;
  j      : integer;
  s      : string;
  t      : string;

code
{
   if (length(itemfunc) != length(itemsl))
   {
      log(self.symname + " length of itemsl and itemfunc differs." + itoa(length(itemsl)) + " vs func of " + itoa(length(itemfunc)));
      log(qname + " " + itemsl.[0]);
   }

   // Must be added 
   //
   if (nothanks != "")
   {
      s := "qstItemNoThank@quests()";
      dilcopy(s, self);
      heartbeat := 1;
      wait(SFB_TICK, TRUE); // Allow dil copied to activate
      sendto("nothanks "+qname+"//"+nothanks, self);
   }

   on_activation((self.position <= POSITION_SLEEPING) or (self.position == POSITION_FIGHTING), skip);

   :start:
   wait(SFB_DONE, command("give") and (target == self));

   // log(medium.symname + " : " + medium.name);

   exdp := (qname + " Ongoing") in activator.quests;

   if (not exdp)
      goto start;

   pc := activator;
   item := medium;

   i := 0;
   ln := length(itemsl);

   while (i < ln)
   {
      if ((itemsl.[i] == item.symname) or (itemsl.[i] in item.names))
      {
         if (itemfunc.[i] != "")
         {
            s := itemfunc.[i];
            t := getword(s); // get the function
            j := atoi(getword(s));
            j := dilcall(t)(item, j, s);
            // log("dilcall()()  returned: " + itoa(j));
         }
         else 
            j := 1;
         if (j == 1)
         {
            addstring(exdp.names, itemsl.[i]);
            s := sact(thanksl.[i], A_SOMEONE, pc, item, self, TO_CHAR);
            exec(s, self);
            s := sact("<br/>You've given $3m $2n", A_SOMEONE, pc, item, self, TO_CHAR);
            exdp.descr := exdp.descr + s;
            destroy(item);
            block;
            goto checkit;
         }
      }

      i := i + 1;
   }

   // If there is no match, don't give it back. 
   // If item is to be given back then that's a separate function at the end
   //

   goto start;

:checkit:
   // Check if we have all the items
   i := 0;
   ln := length(itemsl);

   while (i < ln)
   {
      if (not (itemsl.[i] in exdp.names))
         goto start;
      i := i + 1;
   }
   if (not ("$done" in exdp.names))
      addstring(exdp.names, "$done");

   goto start;
}
dilend



dilbegin aware unique fnpri(FN_PRI_MISSION+6) qstItemNoThank();
external
   unitptr make_money@baseget(i1 : integer, i2 : integer);

var
   s : string;
   i : integer;
   t : integer;
   u : unitptr;
   nothanksl : stringlist;
   qstnamesl  : stringlist;
   sl         : stringlist;
code
{
   interrupt(SFB_MSG, TRUE, getarg);
   goto start;

:getarg:
   s := getword(argument);
   if (s != "nothanks")
      goto start;
   
   sl := split(argument, "//");
   addstring(qstnamesl, sl.[0]+" Ongoing");
   addstring(nothanksl, sl.[1]);

:start:
   wait(SFB_DONE, command("give") and (target == self));

   if (medium.objecttype == ITEM_MONEY)
   {
      // This is tricky because the money is now merged with char's local money

      t := medium.value[0];
      i := medium.cost - power;

      // If the receiving char didn't have any coins of this type, just give the full monty back
      if (i == 0)
      {
         link(medium, activator);
         goto sayit;
      }

      // NPC already had money of this type
      //
      destroy(medium);

      u := make_money@baseget(t, power);
      link(u, activator);

      if (i > 0)
      {
         //log("Creating money for self: " + itoa(i) + " pieces  of type " + itoa(t));
         u := make_money@baseget(t, i);
      }
   }
   else
   {
      // Just link the item back
      link(medium, activator);
   }

:sayit:
   i := 0;
   while (i < length(qstnamesl))
   {
      if (qstnamesl.[i] in activator.quests)
         goto sayit2;
      i := i + 1;
   }
   exec("emote won't accept your item.", self);
   goto start;

:sayit2:
   s := sact(nothanksl.[i], A_SOMEONE, activator, medium, self, TO_CHAR);
   exec(s, self);

   goto start;
}
dilend


dilbegin unitptr qstWaitDone(qname : string, pc : unitptr,
                             sl : stringlist, xp : integer, gold : integer, itemsl : stringlist);
var
   pcname : string;
   u      : unitptr;
   i      : integer;
   ln     : integer;
   exdp   : extraptr;
   s      : string;

code
{
   on_activation((self.position <= POSITION_SLEEPING) or (self.position == POSITION_FIGHTING), skip);
   u := null;

   :start:
   if ((qname + " Complete") in activator.quests)
     return(u);

   exdp := (qname + " Ongoing") in activator.quests;

   if (not exdp)
      return(u);

   if (not ("$done" in exdp.names))
      return(u);

   // We collected all the items
   secure(pc, lostpc);

   i := 0;
   ln := length(sl);
	pause;
	heartbeat := PULSE_SEC * 4;

   priority;

   // Give the explanation
   while (i < ln)
   {
      s := sact(sl.[i], A_SOMEONE, pc, null, self, TO_CHAR);
      exec(s, self);
      pause;
      i := i + 1;
   }

   subextra(pc.quests, qname + " Ongoing");
   s := qname + " Complete";
   sl := null;
   addstring(sl, s);
   addextra(pc.quests, sl, "");
   if (xp > 0)
   {
      experience(xp, pc);
      sendtext("You earned " + itoa(xp) + " experience.<br/>", pc);
   }
   if (gold > 0)
   {
      i := transfermoney(null, pc, gold);
      sendtext("You received " + moneystring(gold, TRUE) + "<br/>", pc);
   }

   i := 0;
   while (i < length(itemsl))
   {
      if (itemsl.[i] != "")
      {
         u := load(itemsl.[i]);
         if (u == null)
            log("Quest " + qname + " unable to load item " + itemsl.[i]);
         else
         {
            if ((u.manipulate & (MANIPULATE_WEAR_FINGER | MANIPULATE_WEAR_NECK  |
                  MANIPULATE_WEAR_BODY   | MANIPULATE_WEAR_HEAD  |
                  MANIPULATE_WEAR_LEGS   | MANIPULATE_WEAR_FEET  |
                  MANIPULATE_WEAR_HANDS  | MANIPULATE_WEAR_ARMS  |
                  MANIPULATE_WEAR_SHIELD | MANIPULATE_WEAR_ABOUT |
                  MANIPULATE_WEAR_WAIST  | MANIPULATE_WEAR_WRIST |
                  MANIPULATE_WIELD       | MANIPULATE_WEAR_EAR   |
                  MANIPULATE_WEAR_BACK   | MANIPULATE_WEAR_CHEST |
                  MANIPULATE_WEAR_ANKLE)) or (u.objecttype == ITEM_WEAPON))
               u.height := pc.height; // For wearable items, make them fit

            link(u, pc);
            act("$3n gives you $2n.", A_SOMEONE, pc, u, self, TO_CHAR);
            act("$3n gives $2n to $1n.", A_SOMEONE, pc, u, self, TO_REST);
         }
      }
      i := i + 1;
   }

   nopriority;
   return(pc);

   :lostpc:
   nopriority;
   exec("say How rude!", self);
   u := null;
   return(u);
}
dilend


dilbegin fnpri(FN_PRI_MISSION+7)
          qstSimpleQuest(qname : string,
                        qstAsk : stringlist,
                        qstAccepted : stringlist,
                        qstDescr : string,
                        qstDone : stringlist,
                        xp : integer, gold : integer, itemsl : stringlist);
external
   unitptr qstWaitHero@quests(qname : string, pc : unitptr, sl : stringlist, acptfunc : string);
   extraptr qstAssign@quests(qname : string, pc : unitptr, sl : stringlist, qdescr : string);
   unitptr qstWaitDone@quests(qname : string, pc : unitptr,
                             sl : stringlist, xp : integer, gold : integer, itemsl : stringlist);

var
   pc     : unitptr;
   pot    : unitptr;
   exdp   : extraptr;

code
{
   heartbeat := PULSE_SEC *4;
   
   :start:
   wait(SFB_CMD, (activator.type == UNIT_ST_PC));

   log("Debug qstWaitHero begin");
   pc := qstWaitHero@quests(qname, activator, qstAsk, "");
   log("Debug qstWaitHero end");

   if (pc != null)
   {
      log("Debug qstAssign begin");
      exdp := qstAssign@quests(qname, pc, qstAccepted, qstDescr);
      log("Debug qstAssign end");
      goto start;
   }

   log("Debug qstWaitDone begin");
   pc := qstWaitDone@quests(qname, activator, qstDone, xp, gold, itemsl);
   log("Debug qstWaitDone end");
   goto start;
}
dilend



%mobiles

zombie
names {"zombie"}
title "the zombie"
descr "A mindless zombie is here."

/* Test scripts */
end


%end
